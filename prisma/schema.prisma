// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String       @id @default(uuid())
  name         String
  email        String       @unique
  password     String
  bloodType    String
  location     String
  role         String       @default("user")
  accountStatus String @default("activate")
  availability Boolean      @default(false)
  createdAt    DateTime     @default(now())
  updateAt     DateTime     @updatedAt
  userProfile  UserProfile?
  donor        Request[]    @relation("donor")
  requester    Request[]    @relation("requester")

  @@map("user")
}

model UserProfile {
  id               String   @id @default(uuid())
  userId           String   @unique
  bio              String
  age              Int
  lastDonationDate String
  donateblood      String   @default("yes")
  createdAt        DateTime @default(now())
  updateAt         DateTime @updatedAt
  user             User     @relation(fields: [userId], references: [id])

  @@map("userProfile")
}

model Request {
  id              String        @id @default(uuid())
  donorId         String?
  requesterId     String?
  phoneNumber     String
  dateOfDonation  String
  hospitalName    String
  hospitalAddress String
  reason          String
  requestStatus   RequestStatus @default(PENDDING)
  createdAt       DateTime      @default(now())
  updateAt        DateTime      @updatedAt
  donor           User?         @relation(fields: [donorId], references: [id], name: "donor")
  requester       User?         @relation(fields: [requesterId], references: [id], name: "requester")

  @@map("request")
}

enum RequestStatus {
  PENDDING
  APPROVED
  REJECTED
}
